// Protobuf definition for Cornell Rocketry Team's
// Fill Station Commands
//
// Author: Zach Garcia

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: command.proto

package command_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlightMode int32

const (
	FlightMode_STARTUP         FlightMode = 0
	FlightMode_STANDBY         FlightMode = 1
	FlightMode_ASCENT          FlightMode = 2
	FlightMode_DROGUE_DEPLOYED FlightMode = 3
	FlightMode_MAIN_DEPLOYED   FlightMode = 4
	FlightMode_FAULT           FlightMode = 5
)

// Enum value maps for FlightMode.
var (
	FlightMode_name = map[int32]string{
		0: "STARTUP",
		1: "STANDBY",
		2: "ASCENT",
		3: "DROGUE_DEPLOYED",
		4: "MAIN_DEPLOYED",
		5: "FAULT",
	}
	FlightMode_value = map[string]int32{
		"STARTUP":         0,
		"STANDBY":         1,
		"ASCENT":          2,
		"DROGUE_DEPLOYED": 3,
		"MAIN_DEPLOYED":   4,
		"FAULT":           5,
	}
)

func (x FlightMode) Enum() *FlightMode {
	p := new(FlightMode)
	*p = x
	return p
}

func (x FlightMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightMode) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[0].Descriptor()
}

func (FlightMode) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[0]
}

func (x FlightMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightMode.Descriptor instead.
func (FlightMode) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{0}
}

// The telemetry message
// TODO(Zach) add parameters for commanding
type Command struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sv1Open       *bool                  `protobuf:"varint,1,opt,name=sv1_open,json=sv1Open,proto3,oneof" json:"sv1_open,omitempty"`
	Bv1Open       *bool                  `protobuf:"varint,2,opt,name=bv1_open,json=bv1Open,proto3,oneof" json:"bv1_open,omitempty"`
	Bv1Off        *bool                  `protobuf:"varint,3,opt,name=bv1_off,json=bv1Off,proto3,oneof" json:"bv1_off,omitempty"`
	QdRetract     *bool                  `protobuf:"varint,4,opt,name=qd_retract,json=qdRetract,proto3,oneof" json:"qd_retract,omitempty"`
	Ignite        *bool                  `protobuf:"varint,5,opt,name=ignite,proto3,oneof" json:"ignite,omitempty"`
	Sv2Close      *bool                  `protobuf:"varint,6,opt,name=sv2_close,json=sv2Close,proto3,oneof" json:"sv2_close,omitempty"`
	MavOpen       *bool                  `protobuf:"varint,7,opt,name=mav_open,json=mavOpen,proto3,oneof" json:"mav_open,omitempty"`
	Launch        *bool                  `protobuf:"varint,8,opt,name=launch,proto3,oneof" json:"launch,omitempty"`
	Vent          *bool                  `protobuf:"varint,9,opt,name=vent,proto3,oneof" json:"vent,omitempty"` // optional bool clear_sd = 10;
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_command_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{0}
}

func (x *Command) GetSv1Open() bool {
	if x != nil && x.Sv1Open != nil {
		return *x.Sv1Open
	}
	return false
}

func (x *Command) GetBv1Open() bool {
	if x != nil && x.Bv1Open != nil {
		return *x.Bv1Open
	}
	return false
}

func (x *Command) GetBv1Off() bool {
	if x != nil && x.Bv1Off != nil {
		return *x.Bv1Off
	}
	return false
}

func (x *Command) GetQdRetract() bool {
	if x != nil && x.QdRetract != nil {
		return *x.QdRetract
	}
	return false
}

func (x *Command) GetIgnite() bool {
	if x != nil && x.Ignite != nil {
		return *x.Ignite
	}
	return false
}

func (x *Command) GetSv2Close() bool {
	if x != nil && x.Sv2Close != nil {
		return *x.Sv2Close
	}
	return false
}

func (x *Command) GetMavOpen() bool {
	if x != nil && x.MavOpen != nil {
		return *x.MavOpen
	}
	return false
}

func (x *Command) GetLaunch() bool {
	if x != nil && x.Launch != nil {
		return *x.Launch
	}
	return false
}

func (x *Command) GetVent() bool {
	if x != nil && x.Vent != nil {
		return *x.Vent
	}
	return false
}

// The response message containing an ack
// TODO(Zach) add relevant reply values?
type CommandReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandReply) Reset() {
	*x = CommandReply{}
	mi := &file_command_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReply) ProtoMessage() {}

func (x *CommandReply) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReply.ProtoReflect.Descriptor instead.
func (*CommandReply) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{1}
}

// The telemetry request message
type FillStationTelemetryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FillStationTelemetryRequest) Reset() {
	*x = FillStationTelemetryRequest{}
	mi := &file_command_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillStationTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillStationTelemetryRequest) ProtoMessage() {}

func (x *FillStationTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillStationTelemetryRequest.ProtoReflect.Descriptor instead.
func (*FillStationTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{2}
}

// Rocket Telemetry Request
type RocketTelemetryRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	IsRocketTelemetryRequest bool                   `protobuf:"varint,1,opt,name=isRocketTelemetryRequest,proto3" json:"isRocketTelemetryRequest,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *RocketTelemetryRequest) Reset() {
	*x = RocketTelemetryRequest{}
	mi := &file_command_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RocketTelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RocketTelemetryRequest) ProtoMessage() {}

func (x *RocketTelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RocketTelemetryRequest.ProtoReflect.Descriptor instead.
func (*RocketTelemetryRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{3}
}

func (x *RocketTelemetryRequest) GetIsRocketTelemetryRequest() bool {
	if x != nil {
		return x.IsRocketTelemetryRequest
	}
	return false
}

type Events struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	AltitudeArmed              bool                   `protobuf:"varint,1,opt,name=altitude_armed,json=altitudeArmed,proto3" json:"altitude_armed,omitempty"`
	AltimeterInitFailed        bool                   `protobuf:"varint,2,opt,name=altimeter_init_failed,json=altimeterInitFailed,proto3" json:"altimeter_init_failed,omitempty"`
	AltimeterReadingFailed     bool                   `protobuf:"varint,3,opt,name=altimeter_reading_failed,json=altimeterReadingFailed,proto3" json:"altimeter_reading_failed,omitempty"`
	GpsInitFailed              bool                   `protobuf:"varint,4,opt,name=gps_init_failed,json=gpsInitFailed,proto3" json:"gps_init_failed,omitempty"`
	GpsReadingFailed           bool                   `protobuf:"varint,5,opt,name=gps_reading_failed,json=gpsReadingFailed,proto3" json:"gps_reading_failed,omitempty"`
	ImuInitFailed              bool                   `protobuf:"varint,6,opt,name=imu_init_failed,json=imuInitFailed,proto3" json:"imu_init_failed,omitempty"`
	ImuReadingFailed           bool                   `protobuf:"varint,7,opt,name=imu_reading_failed,json=imuReadingFailed,proto3" json:"imu_reading_failed,omitempty"`
	AccelerometerInitFailed    bool                   `protobuf:"varint,8,opt,name=accelerometer_init_failed,json=accelerometerInitFailed,proto3" json:"accelerometer_init_failed,omitempty"`
	AccelerometerReadingFailed bool                   `protobuf:"varint,9,opt,name=accelerometer_reading_failed,json=accelerometerReadingFailed,proto3" json:"accelerometer_reading_failed,omitempty"`
	AdcInitFailed              bool                   `protobuf:"varint,10,opt,name=adc_init_failed,json=adcInitFailed,proto3" json:"adc_init_failed,omitempty"`
	AdcReadingFailed           bool                   `protobuf:"varint,11,opt,name=adc_reading_failed,json=adcReadingFailed,proto3" json:"adc_reading_failed,omitempty"`
	FramInitFailed             bool                   `protobuf:"varint,12,opt,name=fram_init_failed,json=framInitFailed,proto3" json:"fram_init_failed,omitempty"`
	FramReadFailed             bool                   `protobuf:"varint,13,opt,name=fram_read_failed,json=framReadFailed,proto3" json:"fram_read_failed,omitempty"`
	FramWriteFailed            bool                   `protobuf:"varint,14,opt,name=fram_write_failed,json=framWriteFailed,proto3" json:"fram_write_failed,omitempty"`
	SdInitFailed               bool                   `protobuf:"varint,15,opt,name=sd_init_failed,json=sdInitFailed,proto3" json:"sd_init_failed,omitempty"`
	SdWriteFailed              bool                   `protobuf:"varint,16,opt,name=sd_write_failed,json=sdWriteFailed,proto3" json:"sd_write_failed,omitempty"`
	MavWasActuated             bool                   `protobuf:"varint,17,opt,name=mav_was_actuated,json=mavWasActuated,proto3" json:"mav_was_actuated,omitempty"`
	SvWasActuated              bool                   `protobuf:"varint,18,opt,name=sv_was_actuated,json=svWasActuated,proto3" json:"sv_was_actuated,omitempty"`
	MainDeployWaitEnd          bool                   `protobuf:"varint,19,opt,name=main_deploy_wait_end,json=mainDeployWaitEnd,proto3" json:"main_deploy_wait_end,omitempty"`
	MainLogShutoff             bool                   `protobuf:"varint,20,opt,name=main_log_shutoff,json=mainLogShutoff,proto3" json:"main_log_shutoff,omitempty"`
	CycleOverflow              bool                   `protobuf:"varint,21,opt,name=cycle_overflow,json=cycleOverflow,proto3" json:"cycle_overflow,omitempty"`
	UnknownCommandReceived     bool                   `protobuf:"varint,22,opt,name=unknown_command_received,json=unknownCommandReceived,proto3" json:"unknown_command_received,omitempty"`
	LaunchCommandReceived      bool                   `protobuf:"varint,23,opt,name=launch_command_received,json=launchCommandReceived,proto3" json:"launch_command_received,omitempty"`
	MavCommandReceived         bool                   `protobuf:"varint,24,opt,name=mav_command_received,json=mavCommandReceived,proto3" json:"mav_command_received,omitempty"`
	SvCommandReceived          bool                   `protobuf:"varint,25,opt,name=sv_command_received,json=svCommandReceived,proto3" json:"sv_command_received,omitempty"`
	SafeCommandReceived        bool                   `protobuf:"varint,26,opt,name=safe_command_received,json=safeCommandReceived,proto3" json:"safe_command_received,omitempty"`
	ResetCardCommandReceived   bool                   `protobuf:"varint,27,opt,name=reset_card_command_received,json=resetCardCommandReceived,proto3" json:"reset_card_command_received,omitempty"`
	ResetFramCommandReceived   bool                   `protobuf:"varint,28,opt,name=reset_fram_command_received,json=resetFramCommandReceived,proto3" json:"reset_fram_command_received,omitempty"`
	StateChangeCommandReceived bool                   `protobuf:"varint,29,opt,name=state_change_command_received,json=stateChangeCommandReceived,proto3" json:"state_change_command_received,omitempty"`
	UmbilicalDisconnected      bool                   `protobuf:"varint,30,opt,name=umbilical_disconnected,json=umbilicalDisconnected,proto3" json:"umbilical_disconnected,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *Events) Reset() {
	*x = Events{}
	mi := &file_command_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4}
}

func (x *Events) GetAltitudeArmed() bool {
	if x != nil {
		return x.AltitudeArmed
	}
	return false
}

func (x *Events) GetAltimeterInitFailed() bool {
	if x != nil {
		return x.AltimeterInitFailed
	}
	return false
}

func (x *Events) GetAltimeterReadingFailed() bool {
	if x != nil {
		return x.AltimeterReadingFailed
	}
	return false
}

func (x *Events) GetGpsInitFailed() bool {
	if x != nil {
		return x.GpsInitFailed
	}
	return false
}

func (x *Events) GetGpsReadingFailed() bool {
	if x != nil {
		return x.GpsReadingFailed
	}
	return false
}

func (x *Events) GetImuInitFailed() bool {
	if x != nil {
		return x.ImuInitFailed
	}
	return false
}

func (x *Events) GetImuReadingFailed() bool {
	if x != nil {
		return x.ImuReadingFailed
	}
	return false
}

func (x *Events) GetAccelerometerInitFailed() bool {
	if x != nil {
		return x.AccelerometerInitFailed
	}
	return false
}

func (x *Events) GetAccelerometerReadingFailed() bool {
	if x != nil {
		return x.AccelerometerReadingFailed
	}
	return false
}

func (x *Events) GetAdcInitFailed() bool {
	if x != nil {
		return x.AdcInitFailed
	}
	return false
}

func (x *Events) GetAdcReadingFailed() bool {
	if x != nil {
		return x.AdcReadingFailed
	}
	return false
}

func (x *Events) GetFramInitFailed() bool {
	if x != nil {
		return x.FramInitFailed
	}
	return false
}

func (x *Events) GetFramReadFailed() bool {
	if x != nil {
		return x.FramReadFailed
	}
	return false
}

func (x *Events) GetFramWriteFailed() bool {
	if x != nil {
		return x.FramWriteFailed
	}
	return false
}

func (x *Events) GetSdInitFailed() bool {
	if x != nil {
		return x.SdInitFailed
	}
	return false
}

func (x *Events) GetSdWriteFailed() bool {
	if x != nil {
		return x.SdWriteFailed
	}
	return false
}

func (x *Events) GetMavWasActuated() bool {
	if x != nil {
		return x.MavWasActuated
	}
	return false
}

func (x *Events) GetSvWasActuated() bool {
	if x != nil {
		return x.SvWasActuated
	}
	return false
}

func (x *Events) GetMainDeployWaitEnd() bool {
	if x != nil {
		return x.MainDeployWaitEnd
	}
	return false
}

func (x *Events) GetMainLogShutoff() bool {
	if x != nil {
		return x.MainLogShutoff
	}
	return false
}

func (x *Events) GetCycleOverflow() bool {
	if x != nil {
		return x.CycleOverflow
	}
	return false
}

func (x *Events) GetUnknownCommandReceived() bool {
	if x != nil {
		return x.UnknownCommandReceived
	}
	return false
}

func (x *Events) GetLaunchCommandReceived() bool {
	if x != nil {
		return x.LaunchCommandReceived
	}
	return false
}

func (x *Events) GetMavCommandReceived() bool {
	if x != nil {
		return x.MavCommandReceived
	}
	return false
}

func (x *Events) GetSvCommandReceived() bool {
	if x != nil {
		return x.SvCommandReceived
	}
	return false
}

func (x *Events) GetSafeCommandReceived() bool {
	if x != nil {
		return x.SafeCommandReceived
	}
	return false
}

func (x *Events) GetResetCardCommandReceived() bool {
	if x != nil {
		return x.ResetCardCommandReceived
	}
	return false
}

func (x *Events) GetResetFramCommandReceived() bool {
	if x != nil {
		return x.ResetFramCommandReceived
	}
	return false
}

func (x *Events) GetStateChangeCommandReceived() bool {
	if x != nil {
		return x.StateChangeCommandReceived
	}
	return false
}

func (x *Events) GetUmbilicalDisconnected() bool {
	if x != nil {
		return x.UmbilicalDisconnected
	}
	return false
}

type RocketMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AltArmed      bool                   `protobuf:"varint,1,opt,name=alt_armed,json=altArmed,proto3" json:"alt_armed,omitempty"`
	AltValid      bool                   `protobuf:"varint,2,opt,name=alt_valid,json=altValid,proto3" json:"alt_valid,omitempty"`
	GpsValid      bool                   `protobuf:"varint,3,opt,name=gps_valid,json=gpsValid,proto3" json:"gps_valid,omitempty"`
	ImuValid      bool                   `protobuf:"varint,4,opt,name=imu_valid,json=imuValid,proto3" json:"imu_valid,omitempty"`
	AccValid      bool                   `protobuf:"varint,5,opt,name=acc_valid,json=accValid,proto3" json:"acc_valid,omitempty"`
	ThermValid    bool                   `protobuf:"varint,6,opt,name=therm_valid,json=thermValid,proto3" json:"therm_valid,omitempty"`
	VoltageValid  bool                   `protobuf:"varint,7,opt,name=voltage_valid,json=voltageValid,proto3" json:"voltage_valid,omitempty"`
	AdcValid      bool                   `protobuf:"varint,8,opt,name=adc_valid,json=adcValid,proto3" json:"adc_valid,omitempty"`
	FramValid     bool                   `protobuf:"varint,9,opt,name=fram_valid,json=framValid,proto3" json:"fram_valid,omitempty"`
	SdValid       bool                   `protobuf:"varint,10,opt,name=sd_valid,json=sdValid,proto3" json:"sd_valid,omitempty"`
	GpsMsgValid   bool                   `protobuf:"varint,11,opt,name=gps_msg_valid,json=gpsMsgValid,proto3" json:"gps_msg_valid,omitempty"`
	MavState      bool                   `protobuf:"varint,12,opt,name=mav_state,json=mavState,proto3" json:"mav_state,omitempty"`
	Sv2State      bool                   `protobuf:"varint,13,opt,name=sv2_state,json=sv2State,proto3" json:"sv2_state,omitempty"`
	FlightMode    FlightMode             `protobuf:"varint,14,opt,name=flight_mode,json=flightMode,proto3,enum=command.FlightMode" json:"flight_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RocketMetadata) Reset() {
	*x = RocketMetadata{}
	mi := &file_command_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RocketMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RocketMetadata) ProtoMessage() {}

func (x *RocketMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RocketMetadata.ProtoReflect.Descriptor instead.
func (*RocketMetadata) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{5}
}

func (x *RocketMetadata) GetAltArmed() bool {
	if x != nil {
		return x.AltArmed
	}
	return false
}

func (x *RocketMetadata) GetAltValid() bool {
	if x != nil {
		return x.AltValid
	}
	return false
}

func (x *RocketMetadata) GetGpsValid() bool {
	if x != nil {
		return x.GpsValid
	}
	return false
}

func (x *RocketMetadata) GetImuValid() bool {
	if x != nil {
		return x.ImuValid
	}
	return false
}

func (x *RocketMetadata) GetAccValid() bool {
	if x != nil {
		return x.AccValid
	}
	return false
}

func (x *RocketMetadata) GetThermValid() bool {
	if x != nil {
		return x.ThermValid
	}
	return false
}

func (x *RocketMetadata) GetVoltageValid() bool {
	if x != nil {
		return x.VoltageValid
	}
	return false
}

func (x *RocketMetadata) GetAdcValid() bool {
	if x != nil {
		return x.AdcValid
	}
	return false
}

func (x *RocketMetadata) GetFramValid() bool {
	if x != nil {
		return x.FramValid
	}
	return false
}

func (x *RocketMetadata) GetSdValid() bool {
	if x != nil {
		return x.SdValid
	}
	return false
}

func (x *RocketMetadata) GetGpsMsgValid() bool {
	if x != nil {
		return x.GpsMsgValid
	}
	return false
}

func (x *RocketMetadata) GetMavState() bool {
	if x != nil {
		return x.MavState
	}
	return false
}

func (x *RocketMetadata) GetSv2State() bool {
	if x != nil {
		return x.Sv2State
	}
	return false
}

func (x *RocketMetadata) GetFlightMode() FlightMode {
	if x != nil {
		return x.FlightMode
	}
	return FlightMode_STARTUP
}

type GPSTelemetry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      int32                  `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     int32                  `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	NumSatellites uint32                 `protobuf:"varint,3,opt,name=num_satellites,json=numSatellites,proto3" json:"num_satellites,omitempty"`
	UtcTime       uint32                 `protobuf:"varint,4,opt,name=utc_time,json=utcTime,proto3" json:"utc_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GPSTelemetry) Reset() {
	*x = GPSTelemetry{}
	mi := &file_command_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPSTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPSTelemetry) ProtoMessage() {}

func (x *GPSTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPSTelemetry.ProtoReflect.Descriptor instead.
func (*GPSTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{6}
}

func (x *GPSTelemetry) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GPSTelemetry) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GPSTelemetry) GetNumSatellites() uint32 {
	if x != nil {
		return x.NumSatellites
	}
	return 0
}

func (x *GPSTelemetry) GetUtcTime() uint32 {
	if x != nil {
		return x.UtcTime
	}
	return 0
}

type AccelerometerTelemetry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccelX        float32                `protobuf:"fixed32,1,opt,name=accel_x,json=accelX,proto3" json:"accel_x,omitempty"`
	AccelY        float32                `protobuf:"fixed32,2,opt,name=accel_y,json=accelY,proto3" json:"accel_y,omitempty"`
	AccelZ        float32                `protobuf:"fixed32,3,opt,name=accel_z,json=accelZ,proto3" json:"accel_z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccelerometerTelemetry) Reset() {
	*x = AccelerometerTelemetry{}
	mi := &file_command_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccelerometerTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccelerometerTelemetry) ProtoMessage() {}

func (x *AccelerometerTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccelerometerTelemetry.ProtoReflect.Descriptor instead.
func (*AccelerometerTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{7}
}

func (x *AccelerometerTelemetry) GetAccelX() float32 {
	if x != nil {
		return x.AccelX
	}
	return 0
}

func (x *AccelerometerTelemetry) GetAccelY() float32 {
	if x != nil {
		return x.AccelY
	}
	return 0
}

func (x *AccelerometerTelemetry) GetAccelZ() float32 {
	if x != nil {
		return x.AccelZ
	}
	return 0
}

type IMUTelemetry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GyroX         float32                `protobuf:"fixed32,1,opt,name=gyro_x,json=gyroX,proto3" json:"gyro_x,omitempty"`
	GyroY         float32                `protobuf:"fixed32,2,opt,name=gyro_y,json=gyroY,proto3" json:"gyro_y,omitempty"`
	GyroZ         float32                `protobuf:"fixed32,3,opt,name=gyro_z,json=gyroZ,proto3" json:"gyro_z,omitempty"`
	AccelX        float32                `protobuf:"fixed32,4,opt,name=accel_x,json=accelX,proto3" json:"accel_x,omitempty"`
	AccelY        float32                `protobuf:"fixed32,5,opt,name=accel_y,json=accelY,proto3" json:"accel_y,omitempty"`
	AccelZ        float32                `protobuf:"fixed32,6,opt,name=accel_z,json=accelZ,proto3" json:"accel_z,omitempty"`
	OriX          float32                `protobuf:"fixed32,7,opt,name=ori_x,json=oriX,proto3" json:"ori_x,omitempty"`
	OriY          float32                `protobuf:"fixed32,8,opt,name=ori_y,json=oriY,proto3" json:"ori_y,omitempty"`
	OriZ          float32                `protobuf:"fixed32,9,opt,name=ori_z,json=oriZ,proto3" json:"ori_z,omitempty"`
	GravX         float32                `protobuf:"fixed32,10,opt,name=grav_x,json=gravX,proto3" json:"grav_x,omitempty"`
	GravY         float32                `protobuf:"fixed32,11,opt,name=grav_y,json=gravY,proto3" json:"grav_y,omitempty"`
	GravZ         float32                `protobuf:"fixed32,12,opt,name=grav_z,json=gravZ,proto3" json:"grav_z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IMUTelemetry) Reset() {
	*x = IMUTelemetry{}
	mi := &file_command_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMUTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMUTelemetry) ProtoMessage() {}

func (x *IMUTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMUTelemetry.ProtoReflect.Descriptor instead.
func (*IMUTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{8}
}

func (x *IMUTelemetry) GetGyroX() float32 {
	if x != nil {
		return x.GyroX
	}
	return 0
}

func (x *IMUTelemetry) GetGyroY() float32 {
	if x != nil {
		return x.GyroY
	}
	return 0
}

func (x *IMUTelemetry) GetGyroZ() float32 {
	if x != nil {
		return x.GyroZ
	}
	return 0
}

func (x *IMUTelemetry) GetAccelX() float32 {
	if x != nil {
		return x.AccelX
	}
	return 0
}

func (x *IMUTelemetry) GetAccelY() float32 {
	if x != nil {
		return x.AccelY
	}
	return 0
}

func (x *IMUTelemetry) GetAccelZ() float32 {
	if x != nil {
		return x.AccelZ
	}
	return 0
}

func (x *IMUTelemetry) GetOriX() float32 {
	if x != nil {
		return x.OriX
	}
	return 0
}

func (x *IMUTelemetry) GetOriY() float32 {
	if x != nil {
		return x.OriY
	}
	return 0
}

func (x *IMUTelemetry) GetOriZ() float32 {
	if x != nil {
		return x.OriZ
	}
	return 0
}

func (x *IMUTelemetry) GetGravX() float32 {
	if x != nil {
		return x.GravX
	}
	return 0
}

func (x *IMUTelemetry) GetGravY() float32 {
	if x != nil {
		return x.GravY
	}
	return 0
}

func (x *IMUTelemetry) GetGravZ() float32 {
	if x != nil {
		return x.GravZ
	}
	return 0
}

type RocketLoRaTelemetry struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Metadata      *RocketMetadata         `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MsSinceBoot   uint32                  `protobuf:"varint,2,opt,name=ms_since_boot,json=msSinceBoot,proto3" json:"ms_since_boot,omitempty"`
	Events        *Events                 `protobuf:"bytes,3,opt,name=events,proto3" json:"events,omitempty"`
	Altitude      float32                 `protobuf:"fixed32,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
	GpsTelem      *GPSTelemetry           `protobuf:"bytes,5,opt,name=gps_telem,json=gpsTelem,proto3" json:"gps_telem,omitempty"`
	ImuTelem      *IMUTelemetry           `protobuf:"bytes,6,opt,name=imu_telem,json=imuTelem,proto3" json:"imu_telem,omitempty"`
	AccelTelem    *AccelerometerTelemetry `protobuf:"bytes,7,opt,name=accel_telem,json=accelTelem,proto3" json:"accel_telem,omitempty"`
	Temp          float32                 `protobuf:"fixed32,8,opt,name=temp,proto3" json:"temp,omitempty"`
	Voltage       float32                 `protobuf:"fixed32,9,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Pt3           float32                 `protobuf:"fixed32,10,opt,name=pt3,proto3" json:"pt3,omitempty"`
	Pt4           float32                 `protobuf:"fixed32,11,opt,name=pt4,proto3" json:"pt4,omitempty"`
	BlimsState    float32                 `protobuf:"fixed32,12,opt,name=blims_state,json=blimsState,proto3" json:"blims_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RocketLoRaTelemetry) Reset() {
	*x = RocketLoRaTelemetry{}
	mi := &file_command_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RocketLoRaTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RocketLoRaTelemetry) ProtoMessage() {}

func (x *RocketLoRaTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RocketLoRaTelemetry.ProtoReflect.Descriptor instead.
func (*RocketLoRaTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{9}
}

func (x *RocketLoRaTelemetry) GetMetadata() *RocketMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RocketLoRaTelemetry) GetMsSinceBoot() uint32 {
	if x != nil {
		return x.MsSinceBoot
	}
	return 0
}

func (x *RocketLoRaTelemetry) GetEvents() *Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *RocketLoRaTelemetry) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *RocketLoRaTelemetry) GetGpsTelem() *GPSTelemetry {
	if x != nil {
		return x.GpsTelem
	}
	return nil
}

func (x *RocketLoRaTelemetry) GetImuTelem() *IMUTelemetry {
	if x != nil {
		return x.ImuTelem
	}
	return nil
}

func (x *RocketLoRaTelemetry) GetAccelTelem() *AccelerometerTelemetry {
	if x != nil {
		return x.AccelTelem
	}
	return nil
}

func (x *RocketLoRaTelemetry) GetTemp() float32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *RocketLoRaTelemetry) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *RocketLoRaTelemetry) GetPt3() float32 {
	if x != nil {
		return x.Pt3
	}
	return 0
}

func (x *RocketLoRaTelemetry) GetPt4() float32 {
	if x != nil {
		return x.Pt4
	}
	return 0
}

func (x *RocketLoRaTelemetry) GetBlimsState() float32 {
	if x != nil {
		return x.BlimsState
	}
	return 0
}

type RocketUmbTelemetry struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Metadata       *RocketMetadata        `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MsSinceBoot    uint32                 `protobuf:"varint,2,opt,name=ms_since_boot,json=msSinceBoot,proto3" json:"ms_since_boot,omitempty"`
	Events         *Events                `protobuf:"bytes,3,opt,name=events,proto3" json:"events,omitempty"`
	BatteryVoltage float32                `protobuf:"fixed32,4,opt,name=battery_voltage,json=batteryVoltage,proto3" json:"battery_voltage,omitempty"`
	Pt3            float32                `protobuf:"fixed32,5,opt,name=pt3,proto3" json:"pt3,omitempty"`
	Pt4            float32                `protobuf:"fixed32,6,opt,name=pt4,proto3" json:"pt4,omitempty"`
	RtdTemp        float32                `protobuf:"fixed32,7,opt,name=rtd_temp,json=rtdTemp,proto3" json:"rtd_temp,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RocketUmbTelemetry) Reset() {
	*x = RocketUmbTelemetry{}
	mi := &file_command_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RocketUmbTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RocketUmbTelemetry) ProtoMessage() {}

func (x *RocketUmbTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RocketUmbTelemetry.ProtoReflect.Descriptor instead.
func (*RocketUmbTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{10}
}

func (x *RocketUmbTelemetry) GetMetadata() *RocketMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RocketUmbTelemetry) GetMsSinceBoot() uint32 {
	if x != nil {
		return x.MsSinceBoot
	}
	return 0
}

func (x *RocketUmbTelemetry) GetEvents() *Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *RocketUmbTelemetry) GetBatteryVoltage() float32 {
	if x != nil {
		return x.BatteryVoltage
	}
	return 0
}

func (x *RocketUmbTelemetry) GetPt3() float32 {
	if x != nil {
		return x.Pt3
	}
	return 0
}

func (x *RocketUmbTelemetry) GetPt4() float32 {
	if x != nil {
		return x.Pt4
	}
	return 0
}

func (x *RocketUmbTelemetry) GetRtdTemp() float32 {
	if x != nil {
		return x.RtdTemp
	}
	return 0
}

type RocketTelemetry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LoraTelem     *RocketLoRaTelemetry   `protobuf:"bytes,1,opt,name=lora_telem,json=loraTelem,proto3,oneof" json:"lora_telem,omitempty"`
	UmbTelem      *RocketUmbTelemetry    `protobuf:"bytes,2,opt,name=umb_telem,json=umbTelem,proto3,oneof" json:"umb_telem,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RocketTelemetry) Reset() {
	*x = RocketTelemetry{}
	mi := &file_command_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RocketTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RocketTelemetry) ProtoMessage() {}

func (x *RocketTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RocketTelemetry.ProtoReflect.Descriptor instead.
func (*RocketTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{11}
}

func (x *RocketTelemetry) GetLoraTelem() *RocketLoRaTelemetry {
	if x != nil {
		return x.LoraTelem
	}
	return nil
}

func (x *RocketTelemetry) GetUmbTelem() *RocketUmbTelemetry {
	if x != nil {
		return x.UmbTelem
	}
	return nil
}

// The telemetry message
type FillStationTelemetry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     uint32                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Pt1           float32                `protobuf:"fixed32,2,opt,name=pt1,proto3" json:"pt1,omitempty"`
	Pt2           float32                `protobuf:"fixed32,3,opt,name=pt2,proto3" json:"pt2,omitempty"`
	Lc1           float32                `protobuf:"fixed32,4,opt,name=lc1,proto3" json:"lc1,omitempty"`
	Ign1Cont      float32                `protobuf:"fixed32,5,opt,name=ign1_cont,json=ign1Cont,proto3" json:"ign1_cont,omitempty"`
	Ign2Cont      float32                `protobuf:"fixed32,6,opt,name=ign2_cont,json=ign2Cont,proto3" json:"ign2_cont,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FillStationTelemetry) Reset() {
	*x = FillStationTelemetry{}
	mi := &file_command_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillStationTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillStationTelemetry) ProtoMessage() {}

func (x *FillStationTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillStationTelemetry.ProtoReflect.Descriptor instead.
func (*FillStationTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{12}
}

func (x *FillStationTelemetry) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FillStationTelemetry) GetPt1() float32 {
	if x != nil {
		return x.Pt1
	}
	return 0
}

func (x *FillStationTelemetry) GetPt2() float32 {
	if x != nil {
		return x.Pt2
	}
	return 0
}

func (x *FillStationTelemetry) GetLc1() float32 {
	if x != nil {
		return x.Lc1
	}
	return 0
}

func (x *FillStationTelemetry) GetIgn1Cont() float32 {
	if x != nil {
		return x.Ign1Cont
	}
	return 0
}

func (x *FillStationTelemetry) GetIgn2Cont() float32 {
	if x != nil {
		return x.Ign2Cont
	}
	return 0
}

var File_command_proto protoreflect.FileDescriptor

var file_command_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x8f, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x76, 0x31, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x73, 0x76, 0x31, 0x4f, 0x70, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x76, 0x31, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x62, 0x76, 0x31, 0x4f, 0x70, 0x65,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x76, 0x31, 0x5f, 0x6f, 0x66, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x06, 0x62, 0x76, 0x31, 0x4f, 0x66, 0x66, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x71, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x09, 0x71, 0x64, 0x52, 0x65, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x76, 0x32, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x08, 0x73, 0x76, 0x32, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x76, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x07, 0x6d, 0x61, 0x76, 0x4f, 0x70,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x08, 0x52, 0x04, 0x76, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x73, 0x76, 0x31, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x76, 0x31,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x76, 0x31, 0x5f, 0x6f, 0x66,
	0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x71, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x73, 0x76, 0x32, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61,
	0x76, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x0a, 0x1b, 0x46, 0x69,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x54, 0x0a, 0x16, 0x52, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x73, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xbf, 0x0b, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x41, 0x72, 0x6d, 0x65,
	0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x67, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x70, 0x73, 0x49, 0x6e, 0x69,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x70, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x67, 0x70, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x6d, 0x75, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x6d, 0x75, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6d, 0x75, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x69,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x63,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x61, 0x64, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x63, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x64, 0x63, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x49,
	0x6e, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x66, 0x72, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x73, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x61, 0x76, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x76, 0x57, 0x61, 0x73, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x76, 0x5f, 0x77, 0x61,
	0x73, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x73, 0x76, 0x57, 0x61, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x2f, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6d,
	0x61, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x57, 0x61, 0x69, 0x74, 0x45, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x68, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x53, 0x68, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x76, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x6d, 0x61, 0x76, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x76, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x73, 0x76, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x61, 0x66, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x75, 0x6d,
	0x62, 0x69, 0x6c, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x75, 0x6d, 0x62, 0x69,
	0x6c, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x22, 0xd2, 0x03, 0x0a, 0x0e, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x41, 0x72, 0x6d, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x70, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x67, 0x70, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x6d, 0x75, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x6d, 0x75, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x72,
	0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x64, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x64, 0x63, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72,
	0x61, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x64, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x70, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x67, 0x70, 0x73, 0x4d, 0x73,
	0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x76, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x76, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x76, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x76, 0x32, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x34, 0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x47, 0x50, 0x53, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x53, 0x61,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x74, 0x63, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x75, 0x74, 0x63, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x59, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5a, 0x22, 0xa2, 0x02, 0x0a, 0x0c, 0x49, 0x4d, 0x55,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x79, 0x72,
	0x6f, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x79, 0x72, 0x6f, 0x58,
	0x12, 0x15, 0x0a, 0x06, 0x67, 0x79, 0x72, 0x6f, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x67, 0x79, 0x72, 0x6f, 0x59, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x79, 0x72, 0x6f, 0x5f,
	0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x79, 0x72, 0x6f, 0x5a, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x5f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x59,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5a, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x72, 0x69,
	0x5f, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x72, 0x69, 0x58, 0x12, 0x13,
	0x0a, 0x05, 0x6f, 0x72, 0x69, 0x5f, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f,
	0x72, 0x69, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x72, 0x69, 0x5f, 0x7a, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x6f, 0x72, 0x69, 0x5a, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x76,
	0x5f, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x72, 0x61, 0x76, 0x58, 0x12,
	0x15, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x76, 0x5f, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x67, 0x72, 0x61, 0x76, 0x59, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x76, 0x5f, 0x7a,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x72, 0x61, 0x76, 0x5a, 0x22, 0xd0, 0x03,
	0x0a, 0x13, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x52, 0x61, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x73,
	0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6d, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x12, 0x27,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x67, 0x70, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x47, 0x50, 0x53, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67,
	0x70, 0x73, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x6d, 0x75, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x4d, 0x55, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x69, 0x6d, 0x75, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x40, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x65, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x74, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x74, 0x33, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x74, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x74, 0x34, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x69, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x6c, 0x69, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xfe, 0x01, 0x0a, 0x12, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x6d, 0x62, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d,
	0x6d, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x6f, 0x74,
	0x12, 0x27, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x70, 0x74, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x70, 0x74, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x74, 0x64, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x74, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x22, 0xaf, 0x01, 0x0a, 0x0f, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x40, 0x0a, 0x0a, 0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x52, 0x61, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x72, 0x61, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x75, 0x6d, 0x62, 0x5f, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x6d, 0x62, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x48, 0x01, 0x52, 0x08, 0x75, 0x6d, 0x62, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x72, 0x61, 0x5f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6d, 0x62, 0x5f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x74,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x74, 0x31, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x74, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x74, 0x32, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x63, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x63, 0x31,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x67, 0x6e, 0x31, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x69, 0x67, 0x6e, 0x31, 0x43, 0x6f, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x67, 0x6e, 0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x69, 0x67, 0x6e, 0x32, 0x43, 0x6f, 0x6e, 0x74, 0x2a, 0x65, 0x0a, 0x0a, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x55, 0x50, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x4c,
	0x4f, 0x59, 0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x05, 0x32, 0x72, 0x0a, 0x14, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x0f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x69, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x32, 0x63, 0x0a, 0x0f, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x00, 0x30, 0x01, 0x32, 0x45, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x42, 0x19, 0x5a, 0x17, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_command_proto_rawDescOnce sync.Once
	file_command_proto_rawDescData []byte
)

func file_command_proto_rawDescGZIP() []byte {
	file_command_proto_rawDescOnce.Do(func() {
		file_command_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_command_proto_rawDesc), len(file_command_proto_rawDesc)))
	})
	return file_command_proto_rawDescData
}

var file_command_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_command_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_command_proto_goTypes = []any{
	(FlightMode)(0),                     // 0: command.FlightMode
	(*Command)(nil),                     // 1: command.Command
	(*CommandReply)(nil),                // 2: command.CommandReply
	(*FillStationTelemetryRequest)(nil), // 3: command.FillStationTelemetryRequest
	(*RocketTelemetryRequest)(nil),      // 4: command.RocketTelemetryRequest
	(*Events)(nil),                      // 5: command.Events
	(*RocketMetadata)(nil),              // 6: command.RocketMetadata
	(*GPSTelemetry)(nil),                // 7: command.GPSTelemetry
	(*AccelerometerTelemetry)(nil),      // 8: command.AccelerometerTelemetry
	(*IMUTelemetry)(nil),                // 9: command.IMUTelemetry
	(*RocketLoRaTelemetry)(nil),         // 10: command.RocketLoRaTelemetry
	(*RocketUmbTelemetry)(nil),          // 11: command.RocketUmbTelemetry
	(*RocketTelemetry)(nil),             // 12: command.RocketTelemetry
	(*FillStationTelemetry)(nil),        // 13: command.FillStationTelemetry
}
var file_command_proto_depIdxs = []int32{
	0,  // 0: command.RocketMetadata.flight_mode:type_name -> command.FlightMode
	6,  // 1: command.RocketLoRaTelemetry.metadata:type_name -> command.RocketMetadata
	5,  // 2: command.RocketLoRaTelemetry.events:type_name -> command.Events
	7,  // 3: command.RocketLoRaTelemetry.gps_telem:type_name -> command.GPSTelemetry
	9,  // 4: command.RocketLoRaTelemetry.imu_telem:type_name -> command.IMUTelemetry
	8,  // 5: command.RocketLoRaTelemetry.accel_telem:type_name -> command.AccelerometerTelemetry
	6,  // 6: command.RocketUmbTelemetry.metadata:type_name -> command.RocketMetadata
	5,  // 7: command.RocketUmbTelemetry.events:type_name -> command.Events
	10, // 8: command.RocketTelemetry.lora_telem:type_name -> command.RocketLoRaTelemetry
	11, // 9: command.RocketTelemetry.umb_telem:type_name -> command.RocketUmbTelemetry
	3,  // 10: command.FillStationTelemeter.StreamTelemetry:input_type -> command.FillStationTelemetryRequest
	4,  // 11: command.RocketTelemeter.StreamTelemetry:input_type -> command.RocketTelemetryRequest
	1,  // 12: command.Commander.SendCommand:input_type -> command.Command
	13, // 13: command.FillStationTelemeter.StreamTelemetry:output_type -> command.FillStationTelemetry
	12, // 14: command.RocketTelemeter.StreamTelemetry:output_type -> command.RocketTelemetry
	2,  // 15: command.Commander.SendCommand:output_type -> command.CommandReply
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_command_proto_init() }
func file_command_proto_init() {
	if File_command_proto != nil {
		return
	}
	file_command_proto_msgTypes[0].OneofWrappers = []any{}
	file_command_proto_msgTypes[11].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_command_proto_rawDesc), len(file_command_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_command_proto_goTypes,
		DependencyIndexes: file_command_proto_depIdxs,
		EnumInfos:         file_command_proto_enumTypes,
		MessageInfos:      file_command_proto_msgTypes,
	}.Build()
	File_command_proto = out.File
	file_command_proto_goTypes = nil
	file_command_proto_depIdxs = nil
}
