// Protobuf definition for Cornell Rocketry Team's
// Fill Station Commands
//
// Author: Zach Garcia

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: command.proto

package command_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Telemeter_StreamTelemetry_FullMethodName = "/command.Telemeter/StreamTelemetry"
)

// TelemeterClient is the client API for Telemeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The telemetry service definition
type TelemeterClient interface {
	// Sends telemetry
	StreamTelemetry(ctx context.Context, in *TelemetryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Telemetry], error)
}

type telemeterClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemeterClient(cc grpc.ClientConnInterface) TelemeterClient {
	return &telemeterClient{cc}
}

func (c *telemeterClient) StreamTelemetry(ctx context.Context, in *TelemetryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Telemetry], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Telemeter_ServiceDesc.Streams[0], Telemeter_StreamTelemetry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TelemetryRequest, Telemetry]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Telemeter_StreamTelemetryClient = grpc.ServerStreamingClient[Telemetry]

// TelemeterServer is the server API for Telemeter service.
// All implementations must embed UnimplementedTelemeterServer
// for forward compatibility.
//
// The telemetry service definition
type TelemeterServer interface {
	// Sends telemetry
	StreamTelemetry(*TelemetryRequest, grpc.ServerStreamingServer[Telemetry]) error
	mustEmbedUnimplementedTelemeterServer()
}

// UnimplementedTelemeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTelemeterServer struct{}

func (UnimplementedTelemeterServer) StreamTelemetry(*TelemetryRequest, grpc.ServerStreamingServer[Telemetry]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTelemetry not implemented")
}
func (UnimplementedTelemeterServer) mustEmbedUnimplementedTelemeterServer() {}
func (UnimplementedTelemeterServer) testEmbeddedByValue()                   {}

// UnsafeTelemeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemeterServer will
// result in compilation errors.
type UnsafeTelemeterServer interface {
	mustEmbedUnimplementedTelemeterServer()
}

func RegisterTelemeterServer(s grpc.ServiceRegistrar, srv TelemeterServer) {
	// If the following call pancis, it indicates UnimplementedTelemeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Telemeter_ServiceDesc, srv)
}

func _Telemeter_StreamTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TelemetryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TelemeterServer).StreamTelemetry(m, &grpc.GenericServerStream[TelemetryRequest, Telemetry]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Telemeter_StreamTelemetryServer = grpc.ServerStreamingServer[Telemetry]

// Telemeter_ServiceDesc is the grpc.ServiceDesc for Telemeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Telemeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.Telemeter",
	HandlerType: (*TelemeterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTelemetry",
			Handler:       _Telemeter_StreamTelemetry_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "command.proto",
}

const (
	Commander_SendCommand_FullMethodName = "/command.Commander/SendCommand"
)

// CommanderClient is the client API for Commander service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The commanding service definition
type CommanderClient interface {
	// Sends telemetry
	SendCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error)
}

type commanderClient struct {
	cc grpc.ClientConnInterface
}

func NewCommanderClient(cc grpc.ClientConnInterface) CommanderClient {
	return &commanderClient{cc}
}

func (c *commanderClient) SendCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, Commander_SendCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommanderServer is the server API for Commander service.
// All implementations must embed UnimplementedCommanderServer
// for forward compatibility.
//
// The commanding service definition
type CommanderServer interface {
	// Sends telemetry
	SendCommand(context.Context, *Command) (*CommandReply, error)
	mustEmbedUnimplementedCommanderServer()
}

// UnimplementedCommanderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommanderServer struct{}

func (UnimplementedCommanderServer) SendCommand(context.Context, *Command) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedCommanderServer) mustEmbedUnimplementedCommanderServer() {}
func (UnimplementedCommanderServer) testEmbeddedByValue()                   {}

// UnsafeCommanderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommanderServer will
// result in compilation errors.
type UnsafeCommanderServer interface {
	mustEmbedUnimplementedCommanderServer()
}

func RegisterCommanderServer(s grpc.ServiceRegistrar, srv CommanderServer) {
	// If the following call pancis, it indicates UnimplementedCommanderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Commander_ServiceDesc, srv)
}

func _Commander_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommanderServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commander_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommanderServer).SendCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

// Commander_ServiceDesc is the grpc.ServiceDesc for Commander service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commander_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.Commander",
	HandlerType: (*CommanderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _Commander_SendCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "command.proto",
}
