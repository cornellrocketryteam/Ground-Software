// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: protos/command_grpc.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  Command,
  CommandReply,
  FillStationTelemetry,
  FillStationTelemetryRequest,
  RocketTelemetry,
  RocketTelemetryRequest,
} from "./command";

export const protobufPackage = "command";

export type FillStationTelemeterService = typeof FillStationTelemeterService;
export const FillStationTelemeterService = {
  /** Sends telemetry */
  streamTelemetry: {
    path: "/command.FillStationTelemeter/StreamTelemetry",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: FillStationTelemetryRequest) =>
      Buffer.from(FillStationTelemetryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FillStationTelemetryRequest.decode(value),
    responseSerialize: (value: FillStationTelemetry) => Buffer.from(FillStationTelemetry.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FillStationTelemetry.decode(value),
  },
} as const;

export interface FillStationTelemeterServer extends UntypedServiceImplementation {
  /** Sends telemetry */
  streamTelemetry: handleServerStreamingCall<FillStationTelemetryRequest, FillStationTelemetry>;
}

export interface FillStationTelemeterClient extends Client {
  /** Sends telemetry */
  streamTelemetry(
    request: FillStationTelemetryRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<FillStationTelemetry>;
  streamTelemetry(
    request: FillStationTelemetryRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<FillStationTelemetry>;
}

export const FillStationTelemeterClient = makeGenericClientConstructor(
  FillStationTelemeterService,
  "command.FillStationTelemeter",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): FillStationTelemeterClient;
  service: typeof FillStationTelemeterService;
  serviceName: string;
};

export type RocketTelemeterService = typeof RocketTelemeterService;
export const RocketTelemeterService = {
  /** Sends telemetry */
  streamTelemetry: {
    path: "/command.RocketTelemeter/StreamTelemetry",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: RocketTelemetryRequest) => Buffer.from(RocketTelemetryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RocketTelemetryRequest.decode(value),
    responseSerialize: (value: RocketTelemetry) => Buffer.from(RocketTelemetry.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RocketTelemetry.decode(value),
  },
} as const;

export interface RocketTelemeterServer extends UntypedServiceImplementation {
  /** Sends telemetry */
  streamTelemetry: handleServerStreamingCall<RocketTelemetryRequest, RocketTelemetry>;
}

export interface RocketTelemeterClient extends Client {
  /** Sends telemetry */
  streamTelemetry(
    request: RocketTelemetryRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<RocketTelemetry>;
  streamTelemetry(
    request: RocketTelemetryRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<RocketTelemetry>;
}

export const RocketTelemeterClient = makeGenericClientConstructor(
  RocketTelemeterService,
  "command.RocketTelemeter",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RocketTelemeterClient;
  service: typeof RocketTelemeterService;
  serviceName: string;
};

export type CommanderService = typeof CommanderService;
export const CommanderService = {
  /** Sends a command and returns a reply */
  sendCommand: {
    path: "/command.Commander/SendCommand",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Command) => Buffer.from(Command.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Command.decode(value),
    responseSerialize: (value: CommandReply) => Buffer.from(CommandReply.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CommandReply.decode(value),
  },
} as const;

export interface CommanderServer extends UntypedServiceImplementation {
  /** Sends a command and returns a reply */
  sendCommand: handleUnaryCall<Command, CommandReply>;
}

export interface CommanderClient extends Client {
  /** Sends a command and returns a reply */
  sendCommand(
    request: Command,
    callback: (error: ServiceError | null, response: CommandReply) => void,
  ): ClientUnaryCall;
  sendCommand(
    request: Command,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CommandReply) => void,
  ): ClientUnaryCall;
  sendCommand(
    request: Command,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CommandReply) => void,
  ): ClientUnaryCall;
}

export const CommanderClient = makeGenericClientConstructor(CommanderService, "command.Commander") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): CommanderClient;
  service: typeof CommanderService;
  serviceName: string;
};
