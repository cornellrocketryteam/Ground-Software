// Protobuf definition for Cornell Rocketry Team's
// Fill Station Commands
//
// Author: Zach Garcia

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.12.4
// source: command.proto

package command_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SensorStatus int32

const (
	SensorStatus_OFF     SensorStatus = 0
	SensorStatus_VALID   SensorStatus = 1
	SensorStatus_INVALID SensorStatus = 2
)

// Enum value maps for SensorStatus.
var (
	SensorStatus_name = map[int32]string{
		0: "OFF",
		1: "VALID",
		2: "INVALID",
	}
	SensorStatus_value = map[string]int32{
		"OFF":     0,
		"VALID":   1,
		"INVALID": 2,
	}
)

func (x SensorStatus) Enum() *SensorStatus {
	p := new(SensorStatus)
	*p = x
	return p
}

func (x SensorStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SensorStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[0].Descriptor()
}

func (SensorStatus) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[0]
}

func (x SensorStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SensorStatus.Descriptor instead.
func (SensorStatus) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{0}
}

type FlightMode int32

const (
	FlightMode_STARTUP         FlightMode = 0
	FlightMode_STANDBY         FlightMode = 1
	FlightMode_ASCENT          FlightMode = 2
	FlightMode_DROGUE_DEPLOYED FlightMode = 3
	FlightMode_MAIN_DEPLOYED   FlightMode = 4
	FlightMode_FAULT           FlightMode = 5
)

// Enum value maps for FlightMode.
var (
	FlightMode_name = map[int32]string{
		0: "STARTUP",
		1: "STANDBY",
		2: "ASCENT",
		3: "DROGUE_DEPLOYED",
		4: "MAIN_DEPLOYED",
		5: "FAULT",
	}
	FlightMode_value = map[string]int32{
		"STARTUP":         0,
		"STANDBY":         1,
		"ASCENT":          2,
		"DROGUE_DEPLOYED": 3,
		"MAIN_DEPLOYED":   4,
		"FAULT":           5,
	}
)

func (x FlightMode) Enum() *FlightMode {
	p := new(FlightMode)
	*p = x
	return p
}

func (x FlightMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlightMode) Descriptor() protoreflect.EnumDescriptor {
	return file_command_proto_enumTypes[1].Descriptor()
}

func (FlightMode) Type() protoreflect.EnumType {
	return &file_command_proto_enumTypes[1]
}

func (x FlightMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlightMode.Descriptor instead.
func (FlightMode) EnumDescriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{1}
}

// The telemetry message
// TODO(Zach) add parameters for commanding
type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sv1Open   bool `protobuf:"varint,1,opt,name=sv1_open,json=sv1Open,proto3" json:"sv1_open,omitempty"`
	Bv1Open   bool `protobuf:"varint,2,opt,name=bv1_open,json=bv1Open,proto3" json:"bv1_open,omitempty"`
	Bv1Off    bool `protobuf:"varint,3,opt,name=bv1_off,json=bv1Off,proto3" json:"bv1_off,omitempty"`
	QdRetract bool `protobuf:"varint,4,opt,name=qd_retract,json=qdRetract,proto3" json:"qd_retract,omitempty"`
	Ignite    bool `protobuf:"varint,5,opt,name=ignite,proto3" json:"ignite,omitempty"`
	Sv2Close  bool `protobuf:"varint,6,opt,name=sv2_close,json=sv2Close,proto3" json:"sv2_close,omitempty"`
	MavOpen   bool `protobuf:"varint,7,opt,name=mav_open,json=mavOpen,proto3" json:"mav_open,omitempty"`
	Fire      bool `protobuf:"varint,8,opt,name=fire,proto3" json:"fire,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	mi := &file_command_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{0}
}

func (x *Command) GetSv1Open() bool {
	if x != nil {
		return x.Sv1Open
	}
	return false
}

func (x *Command) GetBv1Open() bool {
	if x != nil {
		return x.Bv1Open
	}
	return false
}

func (x *Command) GetBv1Off() bool {
	if x != nil {
		return x.Bv1Off
	}
	return false
}

func (x *Command) GetQdRetract() bool {
	if x != nil {
		return x.QdRetract
	}
	return false
}

func (x *Command) GetIgnite() bool {
	if x != nil {
		return x.Ignite
	}
	return false
}

func (x *Command) GetSv2Close() bool {
	if x != nil {
		return x.Sv2Close
	}
	return false
}

func (x *Command) GetMavOpen() bool {
	if x != nil {
		return x.MavOpen
	}
	return false
}

func (x *Command) GetFire() bool {
	if x != nil {
		return x.Fire
	}
	return false
}

// The response message containing an ack
// TODO(Zach) add relevant reply values?
type CommandReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommandReply) Reset() {
	*x = CommandReply{}
	mi := &file_command_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandReply) ProtoMessage() {}

func (x *CommandReply) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandReply.ProtoReflect.Descriptor instead.
func (*CommandReply) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{1}
}

// The telemetry request message
type TelemetryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TelemetryRequest) Reset() {
	*x = TelemetryRequest{}
	mi := &file_command_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TelemetryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryRequest) ProtoMessage() {}

func (x *TelemetryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryRequest.ProtoReflect.Descriptor instead.
func (*TelemetryRequest) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{2}
}

type Events struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyArmed                   bool `protobuf:"varint,1,opt,name=key_armed,json=keyArmed,proto3" json:"key_armed,omitempty"`
	AltitudeArmed              bool `protobuf:"varint,2,opt,name=altitude_armed,json=altitudeArmed,proto3" json:"altitude_armed,omitempty"`
	AltimeterInitFailed        bool `protobuf:"varint,3,opt,name=altimeter_init_failed,json=altimeterInitFailed,proto3" json:"altimeter_init_failed,omitempty"`
	AltimeterReadingFailed     bool `protobuf:"varint,4,opt,name=altimeter_reading_failed,json=altimeterReadingFailed,proto3" json:"altimeter_reading_failed,omitempty"`
	AltimeterWasTurnedOff      bool `protobuf:"varint,5,opt,name=altimeter_was_turned_off,json=altimeterWasTurnedOff,proto3" json:"altimeter_was_turned_off,omitempty"`
	GpsInitFailed              bool `protobuf:"varint,6,opt,name=gps_init_failed,json=gpsInitFailed,proto3" json:"gps_init_failed,omitempty"`
	GpsReadingFailed           bool `protobuf:"varint,7,opt,name=gps_reading_failed,json=gpsReadingFailed,proto3" json:"gps_reading_failed,omitempty"`
	GpsWasTurnedOff            bool `protobuf:"varint,8,opt,name=gps_was_turned_off,json=gpsWasTurnedOff,proto3" json:"gps_was_turned_off,omitempty"`
	ImuInitFailed              bool `protobuf:"varint,9,opt,name=imu_init_failed,json=imuInitFailed,proto3" json:"imu_init_failed,omitempty"`
	ImuReadingFailed           bool `protobuf:"varint,10,opt,name=imu_reading_failed,json=imuReadingFailed,proto3" json:"imu_reading_failed,omitempty"`
	ImuWasTurnedOff            bool `protobuf:"varint,11,opt,name=imu_was_turned_off,json=imuWasTurnedOff,proto3" json:"imu_was_turned_off,omitempty"`
	AccelerometerInitFailed    bool `protobuf:"varint,12,opt,name=accelerometer_init_failed,json=accelerometerInitFailed,proto3" json:"accelerometer_init_failed,omitempty"`
	AccelerometerReadingFailed bool `protobuf:"varint,13,opt,name=accelerometer_reading_failed,json=accelerometerReadingFailed,proto3" json:"accelerometer_reading_failed,omitempty"`
	AccelerometerWasTurnedOff  bool `protobuf:"varint,14,opt,name=accelerometer_was_turned_off,json=accelerometerWasTurnedOff,proto3" json:"accelerometer_was_turned_off,omitempty"`
	ThermometerInitFailed      bool `protobuf:"varint,15,opt,name=thermometer_init_failed,json=thermometerInitFailed,proto3" json:"thermometer_init_failed,omitempty"`
	ThermometerReadingFailed   bool `protobuf:"varint,16,opt,name=thermometer_reading_failed,json=thermometerReadingFailed,proto3" json:"thermometer_reading_failed,omitempty"`
	ThermometerWasTurnedOff    bool `protobuf:"varint,17,opt,name=thermometer_was_turned_off,json=thermometerWasTurnedOff,proto3" json:"thermometer_was_turned_off,omitempty"`
	SdInitFailed               bool `protobuf:"varint,18,opt,name=sd_init_failed,json=sdInitFailed,proto3" json:"sd_init_failed,omitempty"`
	SdWriteFailed              bool `protobuf:"varint,19,opt,name=sd_write_failed,json=sdWriteFailed,proto3" json:"sd_write_failed,omitempty"`
	RfmInitFailed              bool `protobuf:"varint,20,opt,name=rfm_init_failed,json=rfmInitFailed,proto3" json:"rfm_init_failed,omitempty"`
	RfmTransmitFailed          bool `protobuf:"varint,21,opt,name=rfm_transmit_failed,json=rfmTransmitFailed,proto3" json:"rfm_transmit_failed,omitempty"`
}

func (x *Events) Reset() {
	*x = Events{}
	mi := &file_command_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Events) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Events) ProtoMessage() {}

func (x *Events) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Events.ProtoReflect.Descriptor instead.
func (*Events) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{3}
}

func (x *Events) GetKeyArmed() bool {
	if x != nil {
		return x.KeyArmed
	}
	return false
}

func (x *Events) GetAltitudeArmed() bool {
	if x != nil {
		return x.AltitudeArmed
	}
	return false
}

func (x *Events) GetAltimeterInitFailed() bool {
	if x != nil {
		return x.AltimeterInitFailed
	}
	return false
}

func (x *Events) GetAltimeterReadingFailed() bool {
	if x != nil {
		return x.AltimeterReadingFailed
	}
	return false
}

func (x *Events) GetAltimeterWasTurnedOff() bool {
	if x != nil {
		return x.AltimeterWasTurnedOff
	}
	return false
}

func (x *Events) GetGpsInitFailed() bool {
	if x != nil {
		return x.GpsInitFailed
	}
	return false
}

func (x *Events) GetGpsReadingFailed() bool {
	if x != nil {
		return x.GpsReadingFailed
	}
	return false
}

func (x *Events) GetGpsWasTurnedOff() bool {
	if x != nil {
		return x.GpsWasTurnedOff
	}
	return false
}

func (x *Events) GetImuInitFailed() bool {
	if x != nil {
		return x.ImuInitFailed
	}
	return false
}

func (x *Events) GetImuReadingFailed() bool {
	if x != nil {
		return x.ImuReadingFailed
	}
	return false
}

func (x *Events) GetImuWasTurnedOff() bool {
	if x != nil {
		return x.ImuWasTurnedOff
	}
	return false
}

func (x *Events) GetAccelerometerInitFailed() bool {
	if x != nil {
		return x.AccelerometerInitFailed
	}
	return false
}

func (x *Events) GetAccelerometerReadingFailed() bool {
	if x != nil {
		return x.AccelerometerReadingFailed
	}
	return false
}

func (x *Events) GetAccelerometerWasTurnedOff() bool {
	if x != nil {
		return x.AccelerometerWasTurnedOff
	}
	return false
}

func (x *Events) GetThermometerInitFailed() bool {
	if x != nil {
		return x.ThermometerInitFailed
	}
	return false
}

func (x *Events) GetThermometerReadingFailed() bool {
	if x != nil {
		return x.ThermometerReadingFailed
	}
	return false
}

func (x *Events) GetThermometerWasTurnedOff() bool {
	if x != nil {
		return x.ThermometerWasTurnedOff
	}
	return false
}

func (x *Events) GetSdInitFailed() bool {
	if x != nil {
		return x.SdInitFailed
	}
	return false
}

func (x *Events) GetSdWriteFailed() bool {
	if x != nil {
		return x.SdWriteFailed
	}
	return false
}

func (x *Events) GetRfmInitFailed() bool {
	if x != nil {
		return x.RfmInitFailed
	}
	return false
}

func (x *Events) GetRfmTransmitFailed() bool {
	if x != nil {
		return x.RfmTransmitFailed
	}
	return false
}

type RocketMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AltArmed    bool         `protobuf:"varint,1,opt,name=alt_armed,json=altArmed,proto3" json:"alt_armed,omitempty"`
	GpsValid    bool         `protobuf:"varint,2,opt,name=gps_valid,json=gpsValid,proto3" json:"gps_valid,omitempty"`
	SdInit      bool         `protobuf:"varint,3,opt,name=sd_init,json=sdInit,proto3" json:"sd_init,omitempty"`
	ThermStatus SensorStatus `protobuf:"varint,4,opt,name=therm_status,json=thermStatus,proto3,enum=command.SensorStatus" json:"therm_status,omitempty"`
	AccStatus   SensorStatus `protobuf:"varint,5,opt,name=acc_status,json=accStatus,proto3,enum=command.SensorStatus" json:"acc_status,omitempty"`
	ImuStatus   SensorStatus `protobuf:"varint,6,opt,name=imu_status,json=imuStatus,proto3,enum=command.SensorStatus" json:"imu_status,omitempty"`
	GpsStatus   SensorStatus `protobuf:"varint,7,opt,name=gps_status,json=gpsStatus,proto3,enum=command.SensorStatus" json:"gps_status,omitempty"`
	AltStatus   SensorStatus `protobuf:"varint,8,opt,name=alt_status,json=altStatus,proto3,enum=command.SensorStatus" json:"alt_status,omitempty"`
	FramStatus  SensorStatus `protobuf:"varint,9,opt,name=fram_status,json=framStatus,proto3,enum=command.SensorStatus" json:"fram_status,omitempty"`
	FlightMode  FlightMode   `protobuf:"varint,10,opt,name=flight_mode,json=flightMode,proto3,enum=command.FlightMode" json:"flight_mode,omitempty"`
}

func (x *RocketMetadata) Reset() {
	*x = RocketMetadata{}
	mi := &file_command_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RocketMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RocketMetadata) ProtoMessage() {}

func (x *RocketMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RocketMetadata.ProtoReflect.Descriptor instead.
func (*RocketMetadata) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{4}
}

func (x *RocketMetadata) GetAltArmed() bool {
	if x != nil {
		return x.AltArmed
	}
	return false
}

func (x *RocketMetadata) GetGpsValid() bool {
	if x != nil {
		return x.GpsValid
	}
	return false
}

func (x *RocketMetadata) GetSdInit() bool {
	if x != nil {
		return x.SdInit
	}
	return false
}

func (x *RocketMetadata) GetThermStatus() SensorStatus {
	if x != nil {
		return x.ThermStatus
	}
	return SensorStatus_OFF
}

func (x *RocketMetadata) GetAccStatus() SensorStatus {
	if x != nil {
		return x.AccStatus
	}
	return SensorStatus_OFF
}

func (x *RocketMetadata) GetImuStatus() SensorStatus {
	if x != nil {
		return x.ImuStatus
	}
	return SensorStatus_OFF
}

func (x *RocketMetadata) GetGpsStatus() SensorStatus {
	if x != nil {
		return x.GpsStatus
	}
	return SensorStatus_OFF
}

func (x *RocketMetadata) GetAltStatus() SensorStatus {
	if x != nil {
		return x.AltStatus
	}
	return SensorStatus_OFF
}

func (x *RocketMetadata) GetFramStatus() SensorStatus {
	if x != nil {
		return x.FramStatus
	}
	return SensorStatus_OFF
}

func (x *RocketMetadata) GetFlightMode() FlightMode {
	if x != nil {
		return x.FlightMode
	}
	return FlightMode_STARTUP
}

type GPSTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude      int32  `protobuf:"varint,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     int32  `protobuf:"varint,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	NumSatellites uint32 `protobuf:"varint,3,opt,name=num_satellites,json=numSatellites,proto3" json:"num_satellites,omitempty"`
}

func (x *GPSTelemetry) Reset() {
	*x = GPSTelemetry{}
	mi := &file_command_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPSTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPSTelemetry) ProtoMessage() {}

func (x *GPSTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPSTelemetry.ProtoReflect.Descriptor instead.
func (*GPSTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{5}
}

func (x *GPSTelemetry) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GPSTelemetry) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GPSTelemetry) GetNumSatellites() uint32 {
	if x != nil {
		return x.NumSatellites
	}
	return 0
}

type AccelerometerTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccelX float32 `protobuf:"fixed32,1,opt,name=accel_x,json=accelX,proto3" json:"accel_x,omitempty"`
	AccelY float32 `protobuf:"fixed32,2,opt,name=accel_y,json=accelY,proto3" json:"accel_y,omitempty"`
	AccelZ float32 `protobuf:"fixed32,3,opt,name=accel_z,json=accelZ,proto3" json:"accel_z,omitempty"`
}

func (x *AccelerometerTelemetry) Reset() {
	*x = AccelerometerTelemetry{}
	mi := &file_command_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccelerometerTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccelerometerTelemetry) ProtoMessage() {}

func (x *AccelerometerTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccelerometerTelemetry.ProtoReflect.Descriptor instead.
func (*AccelerometerTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{6}
}

func (x *AccelerometerTelemetry) GetAccelX() float32 {
	if x != nil {
		return x.AccelX
	}
	return 0
}

func (x *AccelerometerTelemetry) GetAccelY() float32 {
	if x != nil {
		return x.AccelY
	}
	return 0
}

func (x *AccelerometerTelemetry) GetAccelZ() float32 {
	if x != nil {
		return x.AccelZ
	}
	return 0
}

type IMUTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GyroX  float32 `protobuf:"fixed32,1,opt,name=gyro_x,json=gyroX,proto3" json:"gyro_x,omitempty"`
	GyroY  float32 `protobuf:"fixed32,2,opt,name=gyro_y,json=gyroY,proto3" json:"gyro_y,omitempty"`
	GyroZ  float32 `protobuf:"fixed32,3,opt,name=gyro_z,json=gyroZ,proto3" json:"gyro_z,omitempty"`
	AccelX float32 `protobuf:"fixed32,4,opt,name=accel_x,json=accelX,proto3" json:"accel_x,omitempty"`
	AccelY float32 `protobuf:"fixed32,5,opt,name=accel_y,json=accelY,proto3" json:"accel_y,omitempty"`
	AccelZ float32 `protobuf:"fixed32,6,opt,name=accel_z,json=accelZ,proto3" json:"accel_z,omitempty"`
	OriX   float32 `protobuf:"fixed32,7,opt,name=ori_x,json=oriX,proto3" json:"ori_x,omitempty"`
	OriY   float32 `protobuf:"fixed32,8,opt,name=ori_y,json=oriY,proto3" json:"ori_y,omitempty"`
	OriZ   float32 `protobuf:"fixed32,9,opt,name=ori_z,json=oriZ,proto3" json:"ori_z,omitempty"`
	GravX  float32 `protobuf:"fixed32,10,opt,name=grav_x,json=gravX,proto3" json:"grav_x,omitempty"`
	GravY  float32 `protobuf:"fixed32,11,opt,name=grav_y,json=gravY,proto3" json:"grav_y,omitempty"`
	GravZ  float32 `protobuf:"fixed32,12,opt,name=grav_z,json=gravZ,proto3" json:"grav_z,omitempty"`
}

func (x *IMUTelemetry) Reset() {
	*x = IMUTelemetry{}
	mi := &file_command_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IMUTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IMUTelemetry) ProtoMessage() {}

func (x *IMUTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IMUTelemetry.ProtoReflect.Descriptor instead.
func (*IMUTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{7}
}

func (x *IMUTelemetry) GetGyroX() float32 {
	if x != nil {
		return x.GyroX
	}
	return 0
}

func (x *IMUTelemetry) GetGyroY() float32 {
	if x != nil {
		return x.GyroY
	}
	return 0
}

func (x *IMUTelemetry) GetGyroZ() float32 {
	if x != nil {
		return x.GyroZ
	}
	return 0
}

func (x *IMUTelemetry) GetAccelX() float32 {
	if x != nil {
		return x.AccelX
	}
	return 0
}

func (x *IMUTelemetry) GetAccelY() float32 {
	if x != nil {
		return x.AccelY
	}
	return 0
}

func (x *IMUTelemetry) GetAccelZ() float32 {
	if x != nil {
		return x.AccelZ
	}
	return 0
}

func (x *IMUTelemetry) GetOriX() float32 {
	if x != nil {
		return x.OriX
	}
	return 0
}

func (x *IMUTelemetry) GetOriY() float32 {
	if x != nil {
		return x.OriY
	}
	return 0
}

func (x *IMUTelemetry) GetOriZ() float32 {
	if x != nil {
		return x.OriZ
	}
	return 0
}

func (x *IMUTelemetry) GetGravX() float32 {
	if x != nil {
		return x.GravX
	}
	return 0
}

func (x *IMUTelemetry) GetGravY() float32 {
	if x != nil {
		return x.GravY
	}
	return 0
}

func (x *IMUTelemetry) GetGravZ() float32 {
	if x != nil {
		return x.GravZ
	}
	return 0
}

type RocketTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  uint32                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata   *RocketMetadata         `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Events     *Events                 `protobuf:"bytes,3,opt,name=events,proto3" json:"events,omitempty"`
	Altitude   float32                 `protobuf:"fixed32,4,opt,name=altitude,proto3" json:"altitude,omitempty"`
	GpsTelem   *GPSTelemetry           `protobuf:"bytes,5,opt,name=gps_telem,json=gpsTelem,proto3" json:"gps_telem,omitempty"`
	AccelTelem *AccelerometerTelemetry `protobuf:"bytes,6,opt,name=accel_telem,json=accelTelem,proto3" json:"accel_telem,omitempty"`
	ImuTelem   *IMUTelemetry           `protobuf:"bytes,7,opt,name=imu_telem,json=imuTelem,proto3" json:"imu_telem,omitempty"`
	Temp       float32                 `protobuf:"fixed32,8,opt,name=temp,proto3" json:"temp,omitempty"`
	Voltage    float32                 `protobuf:"fixed32,9,opt,name=voltage,proto3" json:"voltage,omitempty"`
	Current    float32                 `protobuf:"fixed32,10,opt,name=current,proto3" json:"current,omitempty"`
	Pt3        float32                 `protobuf:"fixed32,11,opt,name=pt3,proto3" json:"pt3,omitempty"`
	BlimsState int32                   `protobuf:"varint,12,opt,name=blims_state,json=blimsState,proto3" json:"blims_state,omitempty"`
}

func (x *RocketTelemetry) Reset() {
	*x = RocketTelemetry{}
	mi := &file_command_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RocketTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RocketTelemetry) ProtoMessage() {}

func (x *RocketTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RocketTelemetry.ProtoReflect.Descriptor instead.
func (*RocketTelemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{8}
}

func (x *RocketTelemetry) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RocketTelemetry) GetMetadata() *RocketMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RocketTelemetry) GetEvents() *Events {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *RocketTelemetry) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *RocketTelemetry) GetGpsTelem() *GPSTelemetry {
	if x != nil {
		return x.GpsTelem
	}
	return nil
}

func (x *RocketTelemetry) GetAccelTelem() *AccelerometerTelemetry {
	if x != nil {
		return x.AccelTelem
	}
	return nil
}

func (x *RocketTelemetry) GetImuTelem() *IMUTelemetry {
	if x != nil {
		return x.ImuTelem
	}
	return nil
}

func (x *RocketTelemetry) GetTemp() float32 {
	if x != nil {
		return x.Temp
	}
	return 0
}

func (x *RocketTelemetry) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *RocketTelemetry) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *RocketTelemetry) GetPt3() float32 {
	if x != nil {
		return x.Pt3
	}
	return 0
}

func (x *RocketTelemetry) GetBlimsState() int32 {
	if x != nil {
		return x.BlimsState
	}
	return 0
}

// The telemetry message
type Telemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32           `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Pt1       float32          `protobuf:"fixed32,2,opt,name=pt1,proto3" json:"pt1,omitempty"`
	Pt2       float32          `protobuf:"fixed32,3,opt,name=pt2,proto3" json:"pt2,omitempty"`
	Lc1       float32          `protobuf:"fixed32,4,opt,name=lc1,proto3" json:"lc1,omitempty"`
	Sv1Cont   float32          `protobuf:"fixed32,5,opt,name=sv1_cont,json=sv1Cont,proto3" json:"sv1_cont,omitempty"`
	Ign1Cont  float32          `protobuf:"fixed32,6,opt,name=ign1_cont,json=ign1Cont,proto3" json:"ign1_cont,omitempty"`
	Ign2Cont  float32          `protobuf:"fixed32,7,opt,name=ign2_cont,json=ign2Cont,proto3" json:"ign2_cont,omitempty"`
	RockTelem *RocketTelemetry `protobuf:"bytes,8,opt,name=rock_telem,json=rockTelem,proto3" json:"rock_telem,omitempty"`
}

func (x *Telemetry) Reset() {
	*x = Telemetry{}
	mi := &file_command_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Telemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Telemetry) ProtoMessage() {}

func (x *Telemetry) ProtoReflect() protoreflect.Message {
	mi := &file_command_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Telemetry.ProtoReflect.Descriptor instead.
func (*Telemetry) Descriptor() ([]byte, []int) {
	return file_command_proto_rawDescGZIP(), []int{9}
}

func (x *Telemetry) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Telemetry) GetPt1() float32 {
	if x != nil {
		return x.Pt1
	}
	return 0
}

func (x *Telemetry) GetPt2() float32 {
	if x != nil {
		return x.Pt2
	}
	return 0
}

func (x *Telemetry) GetLc1() float32 {
	if x != nil {
		return x.Lc1
	}
	return 0
}

func (x *Telemetry) GetSv1Cont() float32 {
	if x != nil {
		return x.Sv1Cont
	}
	return 0
}

func (x *Telemetry) GetIgn1Cont() float32 {
	if x != nil {
		return x.Ign1Cont
	}
	return 0
}

func (x *Telemetry) GetIgn2Cont() float32 {
	if x != nil {
		return x.Ign2Cont
	}
	return 0
}

func (x *Telemetry) GetRockTelem() *RocketTelemetry {
	if x != nil {
		return x.RockTelem
	}
	return nil
}

var File_command_proto protoreflect.FileDescriptor

var file_command_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x31, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x76, 0x31, 0x4f, 0x70, 0x65, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x76, 0x31, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x62, 0x76, 0x31, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x76,
	0x31, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x76, 0x31,
	0x4f, 0x66, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x71, 0x64, 0x52, 0x65, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x76,
	0x32, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x76, 0x32, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x76, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x76, 0x4f, 0x70,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x66, 0x69, 0x72, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x08, 0x0a, 0x06, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x72, 0x6d,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x41, 0x72, 0x6d,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x61,
	0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x41, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x18, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x6f, 0x66, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x57, 0x61, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4f, 0x66, 0x66,
	0x12, 0x26, 0x0a, 0x0f, 0x67, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x70, 0x73, 0x49, 0x6e,
	0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x70, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x67, 0x70, 0x73, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x67, 0x70, 0x73, 0x5f, 0x77, 0x61,
	0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x67, 0x70, 0x73, 0x57, 0x61, 0x73, 0x54, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x4f, 0x66, 0x66, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6d, 0x75, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6d,
	0x75, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69,
	0x6d, 0x75, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6d, 0x75, 0x52, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6d, 0x75,
	0x5f, 0x77, 0x61, 0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6d, 0x75, 0x57, 0x61, 0x73, 0x54, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x6f, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x57, 0x61, 0x73, 0x54, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x4f, 0x66, 0x66, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x1a, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x74,
	0x68, 0x65, 0x72, 0x6d, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x73, 0x5f, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x57, 0x61, 0x73, 0x54,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x64, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x66, 0x6d, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x72, 0x66, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x72, 0x66, 0x6d, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x66, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x22, 0xe3,
	0x03, 0x0a, 0x0e, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x41, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x70, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x67, 0x70, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x64,
	0x49, 0x6e, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x61, 0x63, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x6d, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x09, 0x69, 0x6d, 0x75, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x70,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x67, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x61, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x22, 0x6f, 0x0a, 0x0c, 0x47, 0x50, 0x53, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x53, 0x61, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x74, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x59, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5a, 0x22, 0xa2, 0x02, 0x0a, 0x0c, 0x49,
	0x4d, 0x55, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x67,
	0x79, 0x72, 0x6f, 0x5f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x79, 0x72,
	0x6f, 0x58, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x79, 0x72, 0x6f, 0x5f, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x67, 0x79, 0x72, 0x6f, 0x59, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x79, 0x72,
	0x6f, 0x5f, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x79, 0x72, 0x6f, 0x5a,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x58, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x5f, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x59, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x7a, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5a, 0x12, 0x13, 0x0a, 0x05, 0x6f,
	0x72, 0x69, 0x5f, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x72, 0x69, 0x58,
	0x12, 0x13, 0x0a, 0x05, 0x6f, 0x72, 0x69, 0x5f, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x6f, 0x72, 0x69, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x6f, 0x72, 0x69, 0x5f, 0x7a, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x72, 0x69, 0x5a, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72,
	0x61, 0x76, 0x5f, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x72, 0x61, 0x76,
	0x58, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x76, 0x5f, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x67, 0x72, 0x61, 0x76, 0x59, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x61, 0x76,
	0x5f, 0x7a, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x67, 0x72, 0x61, 0x76, 0x5a, 0x22,
	0xce, 0x03, 0x0a, 0x0f, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x67,
	0x70, 0x73, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x47, 0x50, 0x53, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x08, 0x67, 0x70, 0x73, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x12,
	0x40, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x12, 0x32, 0x0a, 0x09, 0x69, 0x6d, 0x75, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x49,
	0x4d, 0x55, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6d, 0x75,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x74, 0x33, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x74, 0x33, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x6c, 0x69, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6c, 0x69, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xed, 0x01, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x74, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x74, 0x31, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x74, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x74, 0x32,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x63, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c,
	0x63, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x31, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x76, 0x31, 0x43, 0x6f, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x67, 0x6e, 0x31, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x69, 0x67, 0x6e, 0x31, 0x43, 0x6f, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x67,
	0x6e, 0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x69,
	0x67, 0x6e, 0x32, 0x43, 0x6f, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x6f, 0x63, 0x6b, 0x5f,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x6f, 0x63, 0x6b, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x2a, 0x2f, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x02, 0x2a, 0x65, 0x0a, 0x0a, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x53, 0x43,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x52, 0x4f, 0x47, 0x55, 0x45, 0x5f,
	0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41,
	0x49, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x05, 0x32, 0x51, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x00, 0x30, 0x01, 0x32, 0x45, 0x0a, 0x09, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x42, 0x19, 0x5a, 0x17, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_command_proto_rawDescOnce sync.Once
	file_command_proto_rawDescData = file_command_proto_rawDesc
)

func file_command_proto_rawDescGZIP() []byte {
	file_command_proto_rawDescOnce.Do(func() {
		file_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_command_proto_rawDescData)
	})
	return file_command_proto_rawDescData
}

var file_command_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_command_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_command_proto_goTypes = []any{
	(SensorStatus)(0),              // 0: command.SensorStatus
	(FlightMode)(0),                // 1: command.FlightMode
	(*Command)(nil),                // 2: command.Command
	(*CommandReply)(nil),           // 3: command.CommandReply
	(*TelemetryRequest)(nil),       // 4: command.TelemetryRequest
	(*Events)(nil),                 // 5: command.Events
	(*RocketMetadata)(nil),         // 6: command.RocketMetadata
	(*GPSTelemetry)(nil),           // 7: command.GPSTelemetry
	(*AccelerometerTelemetry)(nil), // 8: command.AccelerometerTelemetry
	(*IMUTelemetry)(nil),           // 9: command.IMUTelemetry
	(*RocketTelemetry)(nil),        // 10: command.RocketTelemetry
	(*Telemetry)(nil),              // 11: command.Telemetry
}
var file_command_proto_depIdxs = []int32{
	0,  // 0: command.RocketMetadata.therm_status:type_name -> command.SensorStatus
	0,  // 1: command.RocketMetadata.acc_status:type_name -> command.SensorStatus
	0,  // 2: command.RocketMetadata.imu_status:type_name -> command.SensorStatus
	0,  // 3: command.RocketMetadata.gps_status:type_name -> command.SensorStatus
	0,  // 4: command.RocketMetadata.alt_status:type_name -> command.SensorStatus
	0,  // 5: command.RocketMetadata.fram_status:type_name -> command.SensorStatus
	1,  // 6: command.RocketMetadata.flight_mode:type_name -> command.FlightMode
	6,  // 7: command.RocketTelemetry.metadata:type_name -> command.RocketMetadata
	5,  // 8: command.RocketTelemetry.events:type_name -> command.Events
	7,  // 9: command.RocketTelemetry.gps_telem:type_name -> command.GPSTelemetry
	8,  // 10: command.RocketTelemetry.accel_telem:type_name -> command.AccelerometerTelemetry
	9,  // 11: command.RocketTelemetry.imu_telem:type_name -> command.IMUTelemetry
	10, // 12: command.Telemetry.rock_telem:type_name -> command.RocketTelemetry
	4,  // 13: command.Telemeter.StreamTelemetry:input_type -> command.TelemetryRequest
	2,  // 14: command.Commander.SendCommand:input_type -> command.Command
	11, // 15: command.Telemeter.StreamTelemetry:output_type -> command.Telemetry
	3,  // 16: command.Commander.SendCommand:output_type -> command.CommandReply
	15, // [15:17] is the sub-list for method output_type
	13, // [13:15] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_command_proto_init() }
func file_command_proto_init() {
	if File_command_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_command_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_command_proto_goTypes,
		DependencyIndexes: file_command_proto_depIdxs,
		EnumInfos:         file_command_proto_enumTypes,
		MessageInfos:      file_command_proto_msgTypes,
	}.Build()
	File_command_proto = out.File
	file_command_proto_rawDesc = nil
	file_command_proto_goTypes = nil
	file_command_proto_depIdxs = nil
}
